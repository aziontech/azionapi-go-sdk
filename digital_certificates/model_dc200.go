/*
Digital Certificates API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package digital_certificates

import (
	"encoding/json"
)

// checks if the DC200 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DC200{}

// DC200 struct for DC200
type DC200 struct {
	SchemaVersion *int32 `json:"schema_version,omitempty"`
	Result *SingleResult `json:"result,omitempty"`
}

// NewDC200 instantiates a new DC200 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDC200() *DC200 {
	this := DC200{}
	return &this
}

// NewDC200WithDefaults instantiates a new DC200 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDC200WithDefaults() *DC200 {
	this := DC200{}
	return &this
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *DC200) GetSchemaVersion() int32 {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret int32
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DC200) GetSchemaVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *DC200) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given int32 and assigns it to the SchemaVersion field.
func (o *DC200) SetSchemaVersion(v int32) {
	o.SchemaVersion = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *DC200) GetResult() SingleResult {
	if o == nil || IsNil(o.Result) {
		var ret SingleResult
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DC200) GetResultOk() (*SingleResult, bool) {
	if o == nil || IsNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *DC200) HasResult() bool {
	if o != nil && !IsNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given SingleResult and assigns it to the Result field.
func (o *DC200) SetResult(v SingleResult) {
	o.Result = &v
}

func (o DC200) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DC200) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	if !IsNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableDC200 struct {
	value *DC200
	isSet bool
}

func (v NullableDC200) Get() *DC200 {
	return v.value
}

func (v *NullableDC200) Set(val *DC200) {
	v.value = val
	v.isSet = true
}

func (v NullableDC200) IsSet() bool {
	return v.isSet
}

func (v *NullableDC200) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDC200(val *DC200) *NullableDC200 {
	return &NullableDC200{value: val, isSet: true}
}

func (v NullableDC200) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDC200) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


