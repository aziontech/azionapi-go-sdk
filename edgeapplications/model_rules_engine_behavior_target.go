/*
Edge Application API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgeapplications

import (
	"encoding/json"
	"fmt"
)

// RulesEngineBehaviorTarget - struct for RulesEngineBehaviorTarget
type RulesEngineBehaviorTarget struct {
	RulesEngineBehaviorTargetOneOf *RulesEngineBehaviorTargetOneOf
	Float32 *float32
	String *string
}

// RulesEngineBehaviorTargetOneOfAsRulesEngineBehaviorTarget is a convenience function that returns RulesEngineBehaviorTargetOneOf wrapped in RulesEngineBehaviorTarget
func RulesEngineBehaviorTargetOneOfAsRulesEngineBehaviorTarget(v *RulesEngineBehaviorTargetOneOf) RulesEngineBehaviorTarget {
	return RulesEngineBehaviorTarget{
		RulesEngineBehaviorTargetOneOf: v,
	}
}

// float32AsRulesEngineBehaviorTarget is a convenience function that returns float32 wrapped in RulesEngineBehaviorTarget
func Float32AsRulesEngineBehaviorTarget(v *float32) RulesEngineBehaviorTarget {
	return RulesEngineBehaviorTarget{
		Float32: v,
	}
}

// stringAsRulesEngineBehaviorTarget is a convenience function that returns string wrapped in RulesEngineBehaviorTarget
func StringAsRulesEngineBehaviorTarget(v *string) RulesEngineBehaviorTarget {
	return RulesEngineBehaviorTarget{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RulesEngineBehaviorTarget) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RulesEngineBehaviorTargetOneOf
	err = newStrictDecoder(data).Decode(&dst.RulesEngineBehaviorTargetOneOf)
	if err == nil {
		jsonRulesEngineBehaviorTargetOneOf, _ := json.Marshal(dst.RulesEngineBehaviorTargetOneOf)
		if string(jsonRulesEngineBehaviorTargetOneOf) == "{}" { // empty struct
			dst.RulesEngineBehaviorTargetOneOf = nil
		} else {
			match++
		}
	} else {
		dst.RulesEngineBehaviorTargetOneOf = nil
	}

	// try to unmarshal data into Float32
	err = newStrictDecoder(data).Decode(&dst.Float32)
	if err == nil {
		jsonFloat32, _ := json.Marshal(dst.Float32)
		if string(jsonFloat32) == "{}" { // empty struct
			dst.Float32 = nil
		} else {
			match++
		}
	} else {
		dst.Float32 = nil
	}

	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			match++
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RulesEngineBehaviorTargetOneOf = nil
		dst.Float32 = nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RulesEngineBehaviorTarget)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RulesEngineBehaviorTarget)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RulesEngineBehaviorTarget) MarshalJSON() ([]byte, error) {
	if src.RulesEngineBehaviorTargetOneOf != nil {
		return json.Marshal(&src.RulesEngineBehaviorTargetOneOf)
	}

	if src.Float32 != nil {
		return json.Marshal(&src.Float32)
	}

	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RulesEngineBehaviorTarget) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RulesEngineBehaviorTargetOneOf != nil {
		return obj.RulesEngineBehaviorTargetOneOf
	}

	if obj.Float32 != nil {
		return obj.Float32
	}

	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableRulesEngineBehaviorTarget struct {
	value *RulesEngineBehaviorTarget
	isSet bool
}

func (v NullableRulesEngineBehaviorTarget) Get() *RulesEngineBehaviorTarget {
	return v.value
}

func (v *NullableRulesEngineBehaviorTarget) Set(val *RulesEngineBehaviorTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableRulesEngineBehaviorTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableRulesEngineBehaviorTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRulesEngineBehaviorTarget(val *RulesEngineBehaviorTarget) *NullableRulesEngineBehaviorTarget {
	return &NullableRulesEngineBehaviorTarget{value: val, isSet: true}
}

func (v NullableRulesEngineBehaviorTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRulesEngineBehaviorTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


