/*
Intelligent DNS

Azion Intelligent DNS API

API version: 3.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package idns

import (
	"encoding/json"
)

// checks if the PatchDnsSecRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchDnsSecRequest{}

// PatchDnsSecRequest Data to enable or disable DNSSEC for a zone
type PatchDnsSecRequest struct {
	IsEnabled *bool `json:"is_enabled,omitempty"`
}

// NewPatchDnsSecRequest instantiates a new PatchDnsSecRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchDnsSecRequest() *PatchDnsSecRequest {
	this := PatchDnsSecRequest{}
	return &this
}

// NewPatchDnsSecRequestWithDefaults instantiates a new PatchDnsSecRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchDnsSecRequestWithDefaults() *PatchDnsSecRequest {
	this := PatchDnsSecRequest{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *PatchDnsSecRequest) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchDnsSecRequest) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *PatchDnsSecRequest) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *PatchDnsSecRequest) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

func (o PatchDnsSecRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchDnsSecRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IsEnabled) {
		toSerialize["is_enabled"] = o.IsEnabled
	}
	return toSerialize, nil
}

type NullablePatchDnsSecRequest struct {
	value *PatchDnsSecRequest
	isSet bool
}

func (v NullablePatchDnsSecRequest) Get() *PatchDnsSecRequest {
	return v.value
}

func (v *NullablePatchDnsSecRequest) Set(val *PatchDnsSecRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchDnsSecRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchDnsSecRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchDnsSecRequest(val *PatchDnsSecRequest) *NullablePatchDnsSecRequest {
	return &NullablePatchDnsSecRequest{value: val, isSet: true}
}

func (v NullablePatchDnsSecRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchDnsSecRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
