/*
Edge Firewall API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgefirewall

import (
	"encoding/json"
	"fmt"
)

// Variables the model 'Variables'
type Variables string

// List of Variables
const (
	HEADER_ACCEPT Variables = "header_accept"
	HEADER_ACCEPT_ENCODING Variables = "header_accept_encoding"
	HEADER_ACCEPT_LANGUAGE Variables = "header_accept_language"
	HEADER_COOKIE Variables = "header_cookie"
	HEADER_ORIGIN Variables = "header_origin"
	HEADER_REFERER Variables = "header_referer"
	HEADER_USER_AGENT Variables = "header_user_agent"
	HOST Variables = "host"
	NETWORK Variables = "network"
	REQUEST_ARGS Variables = "request_args"
	REQUEST_METHOD Variables = "request_method"
	REQUEST_URI Variables = "request_uri"
	SCHEME Variables = "scheme"
	CLIENT_CERTIFICATE_VALIDATION Variables = "client_certificate_validation"
)

// All allowed values of Variables enum
var AllowedVariablesEnumValues = []Variables{
	"header_accept",
	"header_accept_encoding",
	"header_accept_language",
	"header_cookie",
	"header_origin",
	"header_referer",
	"header_user_agent",
	"host",
	"network",
	"request_args",
	"request_method",
	"request_uri",
	"scheme",
	"client_certificate_validation",
}

func (v *Variables) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Variables(value)
	for _, existing := range AllowedVariablesEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Variables", value)
}

// NewVariablesFromValue returns a pointer to a valid Variables
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVariablesFromValue(v string) (*Variables, error) {
	ev := Variables(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Variables: valid values are %v", v, AllowedVariablesEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Variables) IsValid() bool {
	for _, existing := range AllowedVariablesEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Variables value
func (v Variables) Ptr() *Variables {
	return &v
}

type NullableVariables struct {
	value *Variables
	isSet bool
}

func (v NullableVariables) Get() *Variables {
	return v.value
}

func (v *NullableVariables) Set(val *Variables) {
	v.value = val
	v.isSet = true
}

func (v NullableVariables) IsSet() bool {
	return v.isSet
}

func (v *NullableVariables) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariables(val *Variables) *NullableVariables {
	return &NullableVariables{value: val, isSet: true}
}

func (v NullableVariables) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariables) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

