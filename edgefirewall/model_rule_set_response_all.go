/*
Edge Firewall API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgefirewall

import (
	"encoding/json"
)

// checks if the RuleSetResponseAll type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleSetResponseAll{}

// RuleSetResponseAll struct for RuleSetResponseAll
type RuleSetResponseAll struct {
	Count *int64 `json:"count,omitempty"`
	TotalPages *int64 `json:"total_pages,omitempty"`
	SchemaVersion *int32 `json:"schema_version,omitempty"`
	Links *Links `json:"links,omitempty"`
	Results []RuleSetResultAll `json:"results,omitempty"`
}

// NewRuleSetResponseAll instantiates a new RuleSetResponseAll object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleSetResponseAll() *RuleSetResponseAll {
	this := RuleSetResponseAll{}
	var schemaVersion int32 = 3
	this.SchemaVersion = &schemaVersion
	return &this
}

// NewRuleSetResponseAllWithDefaults instantiates a new RuleSetResponseAll object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleSetResponseAllWithDefaults() *RuleSetResponseAll {
	this := RuleSetResponseAll{}
	var schemaVersion int32 = 3
	this.SchemaVersion = &schemaVersion
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *RuleSetResponseAll) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSetResponseAll) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *RuleSetResponseAll) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *RuleSetResponseAll) SetCount(v int64) {
	o.Count = &v
}

// GetTotalPages returns the TotalPages field value if set, zero value otherwise.
func (o *RuleSetResponseAll) GetTotalPages() int64 {
	if o == nil || IsNil(o.TotalPages) {
		var ret int64
		return ret
	}
	return *o.TotalPages
}

// GetTotalPagesOk returns a tuple with the TotalPages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSetResponseAll) GetTotalPagesOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalPages) {
		return nil, false
	}
	return o.TotalPages, true
}

// HasTotalPages returns a boolean if a field has been set.
func (o *RuleSetResponseAll) HasTotalPages() bool {
	if o != nil && !IsNil(o.TotalPages) {
		return true
	}

	return false
}

// SetTotalPages gets a reference to the given int64 and assigns it to the TotalPages field.
func (o *RuleSetResponseAll) SetTotalPages(v int64) {
	o.TotalPages = &v
}

// GetSchemaVersion returns the SchemaVersion field value if set, zero value otherwise.
func (o *RuleSetResponseAll) GetSchemaVersion() int32 {
	if o == nil || IsNil(o.SchemaVersion) {
		var ret int32
		return ret
	}
	return *o.SchemaVersion
}

// GetSchemaVersionOk returns a tuple with the SchemaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSetResponseAll) GetSchemaVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.SchemaVersion) {
		return nil, false
	}
	return o.SchemaVersion, true
}

// HasSchemaVersion returns a boolean if a field has been set.
func (o *RuleSetResponseAll) HasSchemaVersion() bool {
	if o != nil && !IsNil(o.SchemaVersion) {
		return true
	}

	return false
}

// SetSchemaVersion gets a reference to the given int32 and assigns it to the SchemaVersion field.
func (o *RuleSetResponseAll) SetSchemaVersion(v int32) {
	o.SchemaVersion = &v
}

// GetLinks returns the Links field value if set, zero value otherwise.
func (o *RuleSetResponseAll) GetLinks() Links {
	if o == nil || IsNil(o.Links) {
		var ret Links
		return ret
	}
	return *o.Links
}

// GetLinksOk returns a tuple with the Links field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSetResponseAll) GetLinksOk() (*Links, bool) {
	if o == nil || IsNil(o.Links) {
		return nil, false
	}
	return o.Links, true
}

// HasLinks returns a boolean if a field has been set.
func (o *RuleSetResponseAll) HasLinks() bool {
	if o != nil && !IsNil(o.Links) {
		return true
	}

	return false
}

// SetLinks gets a reference to the given Links and assigns it to the Links field.
func (o *RuleSetResponseAll) SetLinks(v Links) {
	o.Links = &v
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *RuleSetResponseAll) GetResults() []RuleSetResultAll {
	if o == nil || IsNil(o.Results) {
		var ret []RuleSetResultAll
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleSetResponseAll) GetResultsOk() ([]RuleSetResultAll, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *RuleSetResponseAll) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []RuleSetResultAll and assigns it to the Results field.
func (o *RuleSetResponseAll) SetResults(v []RuleSetResultAll) {
	o.Results = v
}

func (o RuleSetResponseAll) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleSetResponseAll) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.TotalPages) {
		toSerialize["total_pages"] = o.TotalPages
	}
	if !IsNil(o.SchemaVersion) {
		toSerialize["schema_version"] = o.SchemaVersion
	}
	if !IsNil(o.Links) {
		toSerialize["links"] = o.Links
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	return toSerialize, nil
}

type NullableRuleSetResponseAll struct {
	value *RuleSetResponseAll
	isSet bool
}

func (v NullableRuleSetResponseAll) Get() *RuleSetResponseAll {
	return v.value
}

func (v *NullableRuleSetResponseAll) Set(val *RuleSetResponseAll) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleSetResponseAll) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleSetResponseAll) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleSetResponseAll(val *RuleSetResponseAll) *NullableRuleSetResponseAll {
	return &NullableRuleSetResponseAll{value: val, isSet: true}
}

func (v NullableRuleSetResponseAll) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleSetResponseAll) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


