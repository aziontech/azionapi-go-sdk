/*
Domain API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package domains

import (
	"encoding/json"
)

// checks if the DomainResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainResults{}

// DomainResults struct for DomainResults
type DomainResults struct {
	Id int64 `json:"id"`
	Name string `json:"name"`
	Cnames []string `json:"cnames,omitempty"`
	CnameAccessOnly *bool `json:"cname_access_only,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	EdgeApplicationId *int64 `json:"edge_application_id,omitempty"`
	DigitalCertificateId NullableInt64 `json:"digital_certificate_id,omitempty"`
	DomainName *string `json:"domain_name,omitempty"`
	Environment *string `json:"environment,omitempty"`
}

// NewDomainResults instantiates a new DomainResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainResults(id int64, name string) *DomainResults {
	this := DomainResults{}
	this.Id = id
	this.Name = name
	return &this
}

// NewDomainResultsWithDefaults instantiates a new DomainResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainResultsWithDefaults() *DomainResults {
	this := DomainResults{}
	return &this
}

// GetId returns the Id field value
func (o *DomainResults) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DomainResults) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DomainResults) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DomainResults) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DomainResults) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DomainResults) SetName(v string) {
	o.Name = v
}

// GetCnames returns the Cnames field value if set, zero value otherwise.
func (o *DomainResults) GetCnames() []string {
	if o == nil || IsNil(o.Cnames) {
		var ret []string
		return ret
	}
	return o.Cnames
}

// GetCnamesOk returns a tuple with the Cnames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResults) GetCnamesOk() ([]string, bool) {
	if o == nil || IsNil(o.Cnames) {
		return nil, false
	}
	return o.Cnames, true
}

// HasCnames returns a boolean if a field has been set.
func (o *DomainResults) HasCnames() bool {
	if o != nil && !IsNil(o.Cnames) {
		return true
	}

	return false
}

// SetCnames gets a reference to the given []string and assigns it to the Cnames field.
func (o *DomainResults) SetCnames(v []string) {
	o.Cnames = v
}

// GetCnameAccessOnly returns the CnameAccessOnly field value if set, zero value otherwise.
func (o *DomainResults) GetCnameAccessOnly() bool {
	if o == nil || IsNil(o.CnameAccessOnly) {
		var ret bool
		return ret
	}
	return *o.CnameAccessOnly
}

// GetCnameAccessOnlyOk returns a tuple with the CnameAccessOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResults) GetCnameAccessOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.CnameAccessOnly) {
		return nil, false
	}
	return o.CnameAccessOnly, true
}

// HasCnameAccessOnly returns a boolean if a field has been set.
func (o *DomainResults) HasCnameAccessOnly() bool {
	if o != nil && !IsNil(o.CnameAccessOnly) {
		return true
	}

	return false
}

// SetCnameAccessOnly gets a reference to the given bool and assigns it to the CnameAccessOnly field.
func (o *DomainResults) SetCnameAccessOnly(v bool) {
	o.CnameAccessOnly = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *DomainResults) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResults) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *DomainResults) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *DomainResults) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetEdgeApplicationId returns the EdgeApplicationId field value if set, zero value otherwise.
func (o *DomainResults) GetEdgeApplicationId() int64 {
	if o == nil || IsNil(o.EdgeApplicationId) {
		var ret int64
		return ret
	}
	return *o.EdgeApplicationId
}

// GetEdgeApplicationIdOk returns a tuple with the EdgeApplicationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResults) GetEdgeApplicationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.EdgeApplicationId) {
		return nil, false
	}
	return o.EdgeApplicationId, true
}

// HasEdgeApplicationId returns a boolean if a field has been set.
func (o *DomainResults) HasEdgeApplicationId() bool {
	if o != nil && !IsNil(o.EdgeApplicationId) {
		return true
	}

	return false
}

// SetEdgeApplicationId gets a reference to the given int64 and assigns it to the EdgeApplicationId field.
func (o *DomainResults) SetEdgeApplicationId(v int64) {
	o.EdgeApplicationId = &v
}

// GetDigitalCertificateId returns the DigitalCertificateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DomainResults) GetDigitalCertificateId() int64 {
	if o == nil || IsNil(o.DigitalCertificateId.Get()) {
		var ret int64
		return ret
	}
	return *o.DigitalCertificateId.Get()
}

// GetDigitalCertificateIdOk returns a tuple with the DigitalCertificateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DomainResults) GetDigitalCertificateIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DigitalCertificateId.Get(), o.DigitalCertificateId.IsSet()
}

// HasDigitalCertificateId returns a boolean if a field has been set.
func (o *DomainResults) HasDigitalCertificateId() bool {
	if o != nil && o.DigitalCertificateId.IsSet() {
		return true
	}

	return false
}

// SetDigitalCertificateId gets a reference to the given NullableInt64 and assigns it to the DigitalCertificateId field.
func (o *DomainResults) SetDigitalCertificateId(v int64) {
	o.DigitalCertificateId.Set(&v)
}
// SetDigitalCertificateIdNil sets the value for DigitalCertificateId to be an explicit nil
func (o *DomainResults) SetDigitalCertificateIdNil() {
	o.DigitalCertificateId.Set(nil)
}

// UnsetDigitalCertificateId ensures that no value is present for DigitalCertificateId, not even an explicit nil
func (o *DomainResults) UnsetDigitalCertificateId() {
	o.DigitalCertificateId.Unset()
}

// GetDomainName returns the DomainName field value if set, zero value otherwise.
func (o *DomainResults) GetDomainName() string {
	if o == nil || IsNil(o.DomainName) {
		var ret string
		return ret
	}
	return *o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResults) GetDomainNameOk() (*string, bool) {
	if o == nil || IsNil(o.DomainName) {
		return nil, false
	}
	return o.DomainName, true
}

// HasDomainName returns a boolean if a field has been set.
func (o *DomainResults) HasDomainName() bool {
	if o != nil && !IsNil(o.DomainName) {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given string and assigns it to the DomainName field.
func (o *DomainResults) SetDomainName(v string) {
	o.DomainName = &v
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *DomainResults) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DomainResults) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *DomainResults) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *DomainResults) SetEnvironment(v string) {
	o.Environment = &v
}

func (o DomainResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Cnames) {
		toSerialize["cnames"] = o.Cnames
	}
	if !IsNil(o.CnameAccessOnly) {
		toSerialize["cname_access_only"] = o.CnameAccessOnly
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	if !IsNil(o.EdgeApplicationId) {
		toSerialize["edge_application_id"] = o.EdgeApplicationId
	}
	if o.DigitalCertificateId.IsSet() {
		toSerialize["digital_certificate_id"] = o.DigitalCertificateId.Get()
	}
	if !IsNil(o.DomainName) {
		toSerialize["domain_name"] = o.DomainName
	}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	return toSerialize, nil
}

type NullableDomainResults struct {
	value *DomainResults
	isSet bool
}

func (v NullableDomainResults) Get() *DomainResults {
	return v.value
}

func (v *NullableDomainResults) Set(val *DomainResults) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainResults) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainResults(val *DomainResults) *NullableDomainResults {
	return &NullableDomainResults{value: val, isSet: true}
}

func (v NullableDomainResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


