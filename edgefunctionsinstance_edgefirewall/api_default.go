/*
Edge Functions Instances API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgefunctionsinstance_edgefirewall

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// DefaultApiService DefaultApi service
type DefaultApiService service

type ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	page *int32
	pageSize *int32
	sort *string
	orderBy *string
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest) Page(page int32) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest {
	r.page = &page
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest) PageSize(pageSize int32) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest {
	r.pageSize = &pageSize
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest) Sort(sort string) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest {
	r.sort = &sort
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest) OrderBy(orderBy string) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest {
	r.orderBy = &orderBy
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest) Execute() (*ListEdgeFunctionsInstancesResponse, *http.Response, error) {
	return r.ApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesGetExecute(r)
}

/*
EdgeFirewallEdgeFirewallIdFunctionsInstancesGet List all user Edge Functions Instances

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest
*/
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesGet(ctx context.Context) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest {
	return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ListEdgeFunctionsInstancesResponse
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesGetExecute(r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesGetRequest) (*ListEdgeFunctionsInstancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListEdgeFunctionsInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge_firewall/:edge_firewall_id:/functions_instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page_size", r.pageSize, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "")
	}
	if r.orderBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "order_by", r.orderBy, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	createEdgeFunctionsInstancesRequest *CreateEdgeFunctionsInstancesRequest
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest) CreateEdgeFunctionsInstancesRequest(createEdgeFunctionsInstancesRequest CreateEdgeFunctionsInstancesRequest) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest {
	r.createEdgeFunctionsInstancesRequest = &createEdgeFunctionsInstancesRequest
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest) Execute() (*http.Response, error) {
	return r.ApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesPostExecute(r)
}

/*
EdgeFirewallEdgeFirewallIdFunctionsInstancesPost Create an Edge Functions Instance

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest
*/
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesPost(ctx context.Context) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest {
	return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesPostExecute(r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesPostRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesPost")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge_firewall/:edge_firewall_id:/functions_instances"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.createEdgeFunctionsInstancesRequest == nil {
		return nil, reportError("createEdgeFunctionsInstancesRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.createEdgeFunctionsInstancesRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	uuid string
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteExecute(r)
}

/*
EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete Delete an Edge Functions Instance by uuid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid
 @return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest
*/
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete(ctx context.Context, uuid string) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest {
	return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteExecute(r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	uuid string
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest) Execute() (*EdgeFunctionsInstanceResponse, *http.Response, error) {
	return r.ApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetExecute(r)
}

/*
EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet Retrieve an Edge Functions Instance set by uuid

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid
 @return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest
*/
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet(ctx context.Context, uuid string) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest {
	return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return EdgeFunctionsInstanceResponse
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetExecute(r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGetRequest) (*EdgeFunctionsInstanceResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *EdgeFunctionsInstanceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	uuid string
	body *CreateEdgeFunctionsInstancesRequest
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest) Body(body CreateEdgeFunctionsInstancesRequest) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest {
	r.body = &body
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest) Execute() (*ListEdgeFunctionsInstancesResponse, *http.Response, error) {
	return r.ApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchExecute(r)
}

/*
EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch Update some Edge Functions Instance attributes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid
 @return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest
*/
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch(ctx context.Context, uuid string) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest {
	return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return ListEdgeFunctionsInstancesResponse
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchExecute(r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatchRequest) (*ListEdgeFunctionsInstancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListEdgeFunctionsInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest struct {
	ctx context.Context
	ApiService *DefaultApiService
	uuid string
	body *CreateEdgeFunctionsInstancesRequest
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest) Body(body CreateEdgeFunctionsInstancesRequest) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest {
	r.body = &body
	return r
}

func (r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest) Execute() (*ListEdgeFunctionsInstancesResponse, *http.Response, error) {
	return r.ApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutExecute(r)
}

/*
EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut Overwrite some Edge Functions Instance attributes

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param uuid
 @return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest
*/
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut(ctx context.Context, uuid string) ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest {
	return ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest{
		ApiService: a,
		ctx: ctx,
		uuid: uuid,
	}
}

// Execute executes the request
//  @return ListEdgeFunctionsInstancesResponse
func (a *DefaultApiService) EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutExecute(r ApiEdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPutRequest) (*ListEdgeFunctionsInstancesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ListEdgeFunctionsInstancesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "DefaultApiService.EdgeFirewallEdgeFirewallIdFunctionsInstancesUuidPut")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/edge_firewall/:edge_firewall_id:/functions_instances/{uuid}"
	localVarPath = strings.Replace(localVarPath, "{"+"uuid"+"}", url.PathEscape(parameterValueToString(r.uuid, "uuid")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["tokenAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
