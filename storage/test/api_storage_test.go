/*
Object Storage

Testing StorageAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package storage

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_storage_StorageAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StorageAPIService StorageApiBucketsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsDestroy(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsObjectsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string
		var objectKey string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsObjectsCreate(context.Background(), bucketName, objectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsObjectsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string
		var objectKey string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsObjectsDestroy(context.Background(), bucketName, objectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsObjectsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsObjectsList(context.Background(), bucketName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsObjectsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string
		var objectKey string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsObjectsRetrieve(context.Background(), bucketName, objectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsObjectsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var bucketName string
		var objectKey string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsObjectsUpdate(context.Background(), bucketName, objectKey).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StorageAPIService StorageApiBucketsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.StorageAPI.StorageApiBucketsPartialUpdate(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
