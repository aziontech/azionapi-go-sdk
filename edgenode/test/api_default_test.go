/*
Edgenode API

Testing DefaultApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package edgenode

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_edgenode_DefaultApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultApiService AuthorizeEdgeNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.AuthorizeEdgeNode(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService CreateEdgeNodeSvcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64

		resp, httpRes, err := apiClient.DefaultApi.CreateEdgeNodeSvcs(context.Background(), edgenodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DelEdgeNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64

		httpRes, err := apiClient.DefaultApi.DelEdgeNode(context.Background(), edgenodeId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService DelEdgeNodeSvc", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64
		var bindId int64

		httpRes, err := apiClient.DefaultApi.DelEdgeNodeSvc(context.Background(), edgenodeId, bindId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEdgeNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64

		resp, httpRes, err := apiClient.DefaultApi.GetEdgeNode(context.Background(), edgenodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEdgeNodeGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetEdgeNodeGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEdgeNodeSvcDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64
		var bindId int64

		resp, httpRes, err := apiClient.DefaultApi.GetEdgeNodeSvcDetail(context.Background(), edgenodeId, bindId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEdgeNodeSvcs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64

		resp, httpRes, err := apiClient.DefaultApi.GetEdgeNodeSvcs(context.Background(), edgenodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService GetEdgeNodes", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.DefaultApi.GetEdgeNodes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateEdgeNode", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateEdgeNode(context.Background(), edgenodeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultApiService UpdateEdgeNodeSvcDetail", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var edgenodeId int64
		var bindId int64

		resp, httpRes, err := apiClient.DefaultApi.UpdateEdgeNodeSvcDetail(context.Background(), edgenodeId, bindId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
