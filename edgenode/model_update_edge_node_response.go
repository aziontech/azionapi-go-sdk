/*
Edgenode API

Azion Orchestration

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package edgenode

import (
	"encoding/json"
)

// checks if the UpdateEdgeNodeResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateEdgeNodeResponse{}

// UpdateEdgeNodeResponse struct for UpdateEdgeNodeResponse
type UpdateEdgeNodeResponse struct {
	Groups []NodeGroup `json:"groups"`
	Id int64 `json:"id"`
	Name string `json:"name"`
	Status string `json:"status"`
}

// NewUpdateEdgeNodeResponse instantiates a new UpdateEdgeNodeResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEdgeNodeResponse(groups []NodeGroup, id int64, name string, status string) *UpdateEdgeNodeResponse {
	this := UpdateEdgeNodeResponse{}
	this.Groups = groups
	this.Id = id
	this.Name = name
	this.Status = status
	return &this
}

// NewUpdateEdgeNodeResponseWithDefaults instantiates a new UpdateEdgeNodeResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEdgeNodeResponseWithDefaults() *UpdateEdgeNodeResponse {
	this := UpdateEdgeNodeResponse{}
	return &this
}

// GetGroups returns the Groups field value
func (o *UpdateEdgeNodeResponse) GetGroups() []NodeGroup {
	if o == nil {
		var ret []NodeGroup
		return ret
	}

	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value
// and a boolean to check if the value has been set.
func (o *UpdateEdgeNodeResponse) GetGroupsOk() ([]NodeGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.Groups, true
}

// SetGroups sets field value
func (o *UpdateEdgeNodeResponse) SetGroups(v []NodeGroup) {
	o.Groups = v
}

// GetId returns the Id field value
func (o *UpdateEdgeNodeResponse) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UpdateEdgeNodeResponse) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UpdateEdgeNodeResponse) SetId(v int64) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UpdateEdgeNodeResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UpdateEdgeNodeResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UpdateEdgeNodeResponse) SetName(v string) {
	o.Name = v
}

// GetStatus returns the Status field value
func (o *UpdateEdgeNodeResponse) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *UpdateEdgeNodeResponse) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *UpdateEdgeNodeResponse) SetStatus(v string) {
	o.Status = v
}

func (o UpdateEdgeNodeResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateEdgeNodeResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["groups"] = o.Groups
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

type NullableUpdateEdgeNodeResponse struct {
	value *UpdateEdgeNodeResponse
	isSet bool
}

func (v NullableUpdateEdgeNodeResponse) Get() *UpdateEdgeNodeResponse {
	return v.value
}

func (v *NullableUpdateEdgeNodeResponse) Set(val *UpdateEdgeNodeResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEdgeNodeResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEdgeNodeResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEdgeNodeResponse(val *UpdateEdgeNodeResponse) *NullableUpdateEdgeNodeResponse {
	return &NullableUpdateEdgeNodeResponse{value: val, isSet: true}
}

func (v NullableUpdateEdgeNodeResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEdgeNodeResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


